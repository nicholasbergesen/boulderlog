@model ClimbLogViewModel

<h1>Stats</h1>
<form method="post">
    <div class="row g-4 align-items-center mb-4">
        <div class="col-auto">
            <label asp-for="From" class="col-form-label"></label>
        </div>
        <div class="col-auto">
            <input asp-for="From" class="form-control" onchange="this.form.submit()" />
        </div>
        <div class="col-auto">
            <label asp-for="To" class="control-label"></label>
        </div>
        <div class="col-auto">
            <input asp-for="To" class="form-control" onchange="this.form.submit()" />
        </div>

        <input asp-for="FranchiseId" type="hidden" />
    </div>
</form>

<h3>Past Sessions</h3>
<div class="pb-2">
    <canvas id="sessionChart"></canvas>
</div>

<hr />

<h3 class="pb-1 pt-1">Stats by Franchise</h3>
<div class="row mb-4">
    <form method="post">
        <select asp-for="FranchiseId" id="Franchise" class="form-control" asp-items="Model.Franchises" onchange="this.form.submit()"></select>
        <input type="hidden" asp-for="From" />
        <input type="hidden" asp-for="To" />
    </form>
</div>
<h4>Success rate by grade</h4>
<div class="row">
    <canvas id="gradeSuccessRateChart"></canvas>
</div>
<h4>[Tops:Attempts] ratio by grade</h4>
<div class="row">
    <canvas id="gradeRatioAttemptsChart"></canvas>
</div>
<h4>Average attempts per route</h4>
<div class="row">
    <canvas id="gradeAverateAttemptsChart"></canvas>
</div>
<h4>Untopped Boulders</h4>
<div class="row">
    <canvas id="untoppedBouldersChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const sessionCtx = document.getElementById('sessionChart');
    var sessionLabels = JSON.parse('@Html.Raw(Json.Serialize(Model.SessionLabels))')
    var sessionAttempt = JSON.parse('@Html.Raw(Json.Serialize(Model.SessionValuesAttempt))')
    var sessionTop = JSON.parse('@Html.Raw(Json.Serialize(Model.SessionValuesTop))')
    var sessionBoulders = JSON.parse('@Html.Raw(Json.Serialize(Model.SessionBoulders))')

    new Chart(sessionCtx, {
        type: 'line',
        data: {
            labels: sessionLabels,
            datasets: [{
                label: 'Attempts',
                data: sessionAttempt,
                borderColor: 'lightblue',
                backgroundColor: '#9BD0F5',
            },
            {
                label: 'Tops',
                data: sessionTop,
                borderColor: 'green',
                backgroundColor: '#FFB1C1',
            },
            {
                label: 'Climbs',
                data: sessionBoulders,
                borderColor: 'navy',
                borderDash: [10],
                backgroundColor: '#FFB1C1',
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }

            }
        }
    });

    const gradeSuccessCtx = document.getElementById('gradeSuccessRateChart');
    var gradeSuccessRateLabels = JSON.parse('@Html.Raw(Json.Serialize(Model.GradeSuccessRate_Label))')
    var gradeSuccessRateValues = JSON.parse('@Html.Raw(Json.Serialize(Model.GradeSuccessRate_Values))')

    new Chart(gradeSuccessCtx, {
        type: 'bar',
        data: {
            labels: gradeSuccessRateLabels,
            datasets: [{
                label: 'Success rate',
                data: gradeSuccessRateValues,
                borderWidth: 1
            }]
        }
    })

    const gradeRatioCtx = document.getElementById('gradeRatioAttemptsChart');
    var gradeRatioLabels = JSON.parse('@Html.Raw(Json.Serialize(Model.GradeRatioAttempt_Label))')
    var gradeRatioAttemptValues = JSON.parse('@Html.Raw(Json.Serialize(Model.GradeRatioAttempt_Values))')
    var gradeRatioTopValues = JSON.parse('@Html.Raw(Json.Serialize(Model.GradeRatioTop_Values))')

    new Chart(gradeRatioCtx, {
        type: 'bar',
        data: {
            labels: gradeRatioLabels,
            datasets: [{
                label: 'Attempts',
                data: gradeRatioAttemptValues,
                borderWidth: 1
            },
            {
                label: 'Tops',
                data: gradeRatioTopValues,
                borderWidth: 1

            }]
        },
        options: {
            scales: {
                x: {
                    stacked: true
                },
                y: {
                    stacked: true
                }
            }
        }
    })

    const gradeAverageCtx = document.getElementById('gradeAverateAttemptsChart');
    var gradeAverageLabels = JSON.parse('@Html.Raw(Json.Serialize(Model.GradeAverageAttempt_Label))')
    var gradeAverateValues = JSON.parse('@Html.Raw(Json.Serialize(Model.GradeAverageAttempt_Values))')

    new Chart(gradeAverageCtx, {
        type: 'bar',
        data: {
            labels: gradeAverageLabels,
            datasets: [{
                label: 'Attempts',
                data: gradeAverateValues,
                borderWidth: 1
            }]
        }
    })

    const untoppedCtx = document.getElementById('untoppedBouldersChart');
    var untoppedLabels = JSON.parse('@Html.Raw(Json.Serialize(Model.Untopped_Label))')
    var untoppedValues = JSON.parse('@Html.Raw(Json.Serialize(Model.Untopped_Values))')

    new Chart(untoppedCtx, {
        type: 'bar',
        data: {
            labels: untoppedLabels,
            datasets: [{
                label: 'Untopped',
                data: untoppedValues,
                borderWidth: 1
            }]
        }
    })
</script>
